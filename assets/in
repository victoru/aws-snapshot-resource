#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0

$(configure_credentials $payload)

identifier=$(jq -r '.source.identifier // ""' < $payload)
kind=$(jq -r '.source.kind // "instance"' < $payload)
type=$(jq -r '.source.type // "automated"' < $payload)
region=$(jq -r '.source.region // ""' < $payload)

if [ -z "$identifier" ]; then
  echo "invalid payload (missing identifier):" >&2
  cat $payload >&2
  exit 1
fi

cd $destination

prefix=$(get_kind_prefix $payload)

snapshot_identifier=$(jq -r '.version.ref // ""' < $payload)
snapshot_json=$(describe_single_snapshot $payload $snapshot_identifier)


echo "$snapshot_json" | jq -r .${prefix}SnapshotIdentifier > "SnapshotIdentifier"
echo "$snapshot_json" | jq -r .${prefix}SnapshotIdentifier > "${prefix}SnapshotIdentifier"

jq -n "{
  version: {ref: $(echo $snapshot_identifier | jq -R .)},
  metadata: $(jq -n "[]" | metadata_basic $snapshot_json $prefix)
}" >&3
